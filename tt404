#!/usr/bin/python
from __future__ import with_statement

from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from  lxml import etree
import urllib, urllib2
import re
from itertools import ifilter
import json
import base64
from conf import *
import datetime
import contentRatings
import pickle
import urlparse
import threading
import time

kPluginShortPaths = ['/music', '/photos', '/video', '/applications']
kPluginPaths =  kPluginShortPaths + map(lambda x: x+'/', kPluginShortPaths)
kErrorBody = '<html><head><title>Not Found</title></head><body><h1>404 Not Found</h1></body></html>'
kForbiddenBody = '<html><head><title>Forbidden</title></head><body><h1>403 Forbidden</h1></body></html>'
kBase = 'http://127.0.0.1:32400'

die = False

# TODO: Examples of how to whitelist certain devices
# TODO: Catch and pass on error codes
# TODO: Have this work with other HTTP verbs: HEAD, PUT, TRACE, OPTIONS, CONNECT, PATCH
# TODO: Support for port 3000 stuff
# TODO: Support die in updateCache and getMetadataKeys
# TODO: Quiet mode for updateCache when not loading for the first time

def getURL(url, data=None, headers=None):
  # print 'Requesting', url, data, headers
  headerDict = dict()
  if headers:
    for k, v in headers:
      headerDict[k] = v
    
  if not data: data = None
  req = urllib2.Request(url, data, headerDict)
  f = urllib2.urlopen(req)
  content = f.read()
  
  headerStr = str(f.headers)
  headers = dict()
  for headerLine in headerStr.split('\r\n')[:-1]:
    k, v = headerLine.split(':', 1)
    headers[k] = v[1:]
  return content, headers

def getEtree(url, data=None, headers=None):
  content, headers = getURL(url, data, headers)
  return etree.fromstring(content), headers

def getJSON(url, data=None, headers=None):
  content, headers = getURL(url, data, headers)
  return json.load(content), headers

def _bare_address_string(self):
  # Thank you, thank you, thank you, Santoso Wijaya (santa4nt) http://bugs.python.org/issue6085
  host, port = self.client_address[:2]
  return '%s' % host

def updateCache(verbose=False):
	global _metadataKeys, _libCacheTimes
	if verbose: print 'Getting metadata keys'
	for lib in getEtree(kBase + '/library/sections/')[0].xpath('/MediaContainer/Directory'):
	  libKey = lib.get('key')
	  updatedAt = lib.get('updatedAt')
	  if libKey not in _libCacheTimes or _libCacheTimes[libKey] != updatedAt:
	    _libCacheTimes[libKey] = updatedAt
	    v = libKey
	    _metadataKeys.update(getMetadataKeys(kBase + '/library/sections/%s/all' % libKey, v))
	  if verbose: print 'Finished loading', lib.get('title')
	_metadataKeysCacheTime = datetime.datetime.now()
	with open('cache', 'w') as f:
	  pickle.dump({'metadataKeys': _metadataKeys, 'libCacheTimes': _libCacheTimes}, f)
	if verbose: print 'Saved metadata info'

def validateMetadataKey(key):
  global _metadataKeys, _libCacheTimes
  try: return _metadataKeys[key][0] not in libBlacklist
  except KeyError: pass
  updateCache(True)  
  return _metadataKeys[key]

def getMetadataKeys(path, v):
  metadataKeys = dict()
  for item in getEtree(path)[0].xpath('/MediaContainer/*'):
    key = item.get('ratingKey')
    try: lastUpdate = metadataKeys[key][0]
    except KeyError: lastUpdate = 0 
    updatedAt = item.get('updatedAt')
    metadataKeys[key] = (v, updatedAt)
    
    if item.tag == 'Directory' and updatedAt != lastUpdate:
      for subItem in getEtree(kBase + '/library/metadata/' + key + '/children')[0].xpath('/MediaContainer/*'):
        try: metadataKeys[subItem.get('ratingKey')] = v
        except: pass
      for subItem in getEtree(kBase + '/library/metadata/' + key + '/allLeaves')[0].xpath('/MediaContainer/*'):
        metadataKeys[subItem.get('ratingKey')] = v
  return metadataKeys

_nonPlexOnlinePlugins = list()
_nonPlexOnlinePluginsCacheTime = datetime.datetime(datetime.MINYEAR, 1, 1)
def getNonPlexOnlinePlugins():
  global _nonPlexOnlinePlugins, _nonPlexOnlinePluginsCacheTime
  elapsed = datetime.datetime.now() - _nonPlexOnlinePluginsCacheTime
  if elapsed.total_seconds() < 3600: return _nonPlexOnlinePlugins
  print 'Getting online plug-ins'
  identifiers = list()
  for item in json.load(urllib.urlopen('http://plugins.plexapp.com/apps/all.json')):
    identifiers.append(item['app']['identifier'])
  plugins = list()
  for item in etree.parse(kBase + '/system/plugins/all').xpath('/MediaContainer/Directory'):
    if item.get('identifier') not in identifiers: plugins.append(base64.b64decode(item.get('key') + '==').split('/')[-1])
  _nonPlexOnlinePlugins = plugins
  _nonPlexOnlinePluginsCacheTime = datetime.datetime.now()
  return plugins
  
class PMSHandler(BaseHTTPRequestHandler):
  def getDataAndHeaders(self):
    headers = self.headers.items()
    if 'Content-Length' in headers:
      varLen = int(headers['Content-Length'])
      data = s.rfile.read(varLen)
    else: data = None
    return data, headers

  def stripSections(self, path, itemType):
    out = ''
    itemCount = 0
    
    if itemType == 'lib': shouldStrip = lambda item:item.get('key') in libBlacklist
    elif itemType == 'libMenu': shouldStrip = lambda item: viewerAge and contentRatings.minAgeForContentRating(item.get('contentRating')) > viewerAge
    elif itemType == 'libSystem': shouldStrip = lambda item:base64.b64decode(item.get('key') + '==').split('/')[-1] in libBlacklist
    elif itemType == 'plugin': shouldStrip = lambda item:item.get('key') in pluginBlacklist
    elif itemType == 'pluginSystem': shouldStrip = lambda item:base64.b64decode(item.get('key') + '==').split('/')[-1] in pluginBlacklist
    elif itemType == 'pluginOnlineOnly':
      combinedBlacklist = getNonPlexOnlinePlugins() + pluginBlacklist
      shouldStrip = lambda item:item.get('key') in combinedBlacklist
    elif itemType == 'pluginSystemOnlineOnly':
      combinedBlacklist = getNonPlexOnlinePlugins() + pluginBlacklist
      shouldStrip = lambda item: base64.b64decode(item.get('key') + '==').split('/')[-1] in combinedBlacklist
    else:
      print 'unknown item type ' + itemType
      shouldStrip = lambda item:False
    
    original, headers = getEtree(kBase + path, *self.getDataAndHeaders())
    for item in original.xpath('/MediaContainer/*'):
      if not shouldStrip(item):
        out += etree.tostring(item)
        itemCount += 1
    
    # Populate top level element
    outer = '<?xml version="1.0" encoding="UTF-8"?>\n<MediaContainer '
    for k,v in original.xpath('/MediaContainer')[0].attrib.iteritems():
      if k != 'size': outer += '%s="%s" ' % (k, v)
    outer += 'size="%i">\n' % itemCount
    return outer + out + '</MediaContainer>', headers
  
  def getBlacklistedFolders(self):
    folderBlacklist = list()
    sections = etree.parse(kBase + '/library/sections')
    for item in sections.xpath('/MediaContainer/Directory'):
      if item.get('key') in libBlacklist:
        for location in item.xpath('./Location'):
          folderBlacklist.append(location.get('path'))
    return folderBlacklist
  
  def stripFolders(self, path):
    folderBlacklist = self.getBlacklistedFolders()
    out = ''
    itemCount = 0
    content, headers = etree.parse(kBase + path, *self.getDataAndHeaders())
    for item in content.xpath('/MediaContainer/Path'):
      if item.get('path') not in folderBlacklist:
        out += etree.tostring(item)
        itemCount += 1
    return '<?xml version="1.0" encoding="UTF-8"?>\n<MediaContainer size="%i">\n' % itemCount + out + '</MediaContainer>', headers
  
  def stripPrefs(self):
    body, headers = getEtree(kBase + self.path)
    out = ''
    prefCount = 0
    identifier = body.xpath('/MediaContainer/@identifier')[0]
    for pref in body.xpath('/MediaContainer/Setting'):
      if pref.get('secure') != 'true':
        out += etree.tostring(pref)
        prefCount += 1
      elif securePrefsAccess['write']:
        pref.attrib['value'] = '***'
        out += etree.tostring(pref)
        prefCount += 1
    return '''<?xml version='1.0' encoding='utf-8'?>\n<MediaContainer noHistory="0" replaceParent="0" size="%i" identifier="%s">\n''' % (prefCount, identifier) + out + '</MediaContainer>', headers
    

  def sendHeaders(self, headers, length):
    for k, v in headers.iteritems():
      if k != 'Content-Length': self.send_header(k, v)
      else: self.send_header('Content-Length', length)
    self.end_headers()
  
  def sendErr(self):
    self.send_response(404, 'Not found')
    self.sendHeaders({'Content-Type': 'text/html'}, len(kErrorBody))
    self.wfile.write(kErrorBody)
  
  def sendForbid(self):
    self.send_response(403, 'Forbidden')
    self.sendHeaders({'Content-Type': 'text/html'}, len(kForbiddenBody))
    self.wfile.write(kForbiddenBody)
  
  def sendPassthrough(self):
    body, headers = getURL(kBase + self.path, *self.getDataAndHeaders())
    self.send_response(200)
    self.sendHeaders(headers, len(body))
    self.wfile.write(body)
  
  def sendResponse(self, (body, headers)):
    self.send_response(200)
    self.sendHeaders(headers, len(body))
    self.wfile.write(body)
    
  def handleRequest(self):
    if self.path == '/library/sections' or self.path == '/library/sections/':
      return self.sendResponse(self.stripSections(self.path, 'lib'))
    
    if self.path.startswith('/system/library/sections'):
      return self.sendResponse(self.stripSections(self.path, 'libSystem'))
    
    if self.path.startswith('/library/sections/'):
      if self.path.split('/')[3] in libBlacklist: return self.sendErr()
      elif re.match(r'/library/sections/[^/]+/.+', self.path): return self.sendResponse(self.stripSections(self.path, 'libMenu'))
      else: return self.sendPassthrough()
    
    if self.path in kPluginPaths:
      kind = 'pluginOnlineOnly' if plexOnlineOnly else 'plugin'
      return self.sendResponse(self.stripSections(self.path, kind))
    
    if re.match(r'/system/plugins/[^/]+[/]?$', self.path):
      kind = 'pluginSystemOnlineOnly' if plexOnlineOnly else 'pluginSystem'
      return self.sendResponse(self.stripSections(self.path, kind))
    
    if re.match(r'/[^/]+/:/transcode', self.path):
      try: ratingKey = self.path.split('ratingKey=')[1].split('&')[0]
      except IndexError:
        try: url = urllib.unquote(self.path.split('url=')[1].split('&')[0])
        except IndexError: 
          print 'Transcode Request lacks url'
          return self.sendErr()
        
        parsedURL = urlparse.urlparse(url)
        if parsedURL.netloc.split(':')[-1] == '32400':
          try: ratingKey = parsedURL.path.split('/')[3]
          except IndexError:
            if urlparse.urlparse(url).path in self.getBlacklistedFolders(): return self.sendErr()
            else: return self.sendPassthrough()
        else:
          print 'Transcode request lacking ratingKey', self.path
          return self.sendPassthrough()
      try: contentRating = etree.parse(kBase + '/library/metadata/' + ratingKey).xpath('/MediaContainer/*/@contentRating')
      except: return self.sendErr()
      
      if contentRating and viewerAge and contentRatings.minAgeForContentRating(contentRating[0]) > viewerAge or not validateMetadataKey(ratingKey): return self.sendErr()
      else: return self.sendPassthrough()
    
    if re.match(r'/[^/]+/[^/]+/:/prefs/set', self.path):
      prefs, headers = getEtree(kBase + self.path.split('/set')[0])
      del headers
      
      path, query = self.path.split('?')
      newQuery = ''
      for setting in query.split('&'):
        if not setting: continue
        id, value = setting.split('=')
        try: settingTag = prefs.xpath('/MediaContainer/Setting[@id=%s]' % id)[0]
        except IndexError: continue
        secure = settingTag.get('secure')
        if secure and prefsAccess['write'] or not secure and securePrefsAccess['write']: newQuery += setting + '&'
      
      return self.sendResponse(getURL(kBase + path + newQuery))
    
    if re.match(r'/[^/]+/[^/]+/:/prefs', self.path):
      if not prefsAccess['read']: return self.sendErr()
      if not securePrefsAccess['read']: return self.sendResponse(self.stripPrefs())
      return self.sendPassthrough()
    
    if any(ifilter(lambda p: self.path.startswith(p), kPluginShortPaths)):
      pathComponents = self.path.split('/')
      if len(pathComponents) < 3: return self.sendErr()

      pluginName = pathComponents[2]
      if plexOnlineOnly and pluginName in getNonPlexOnlinePlugins() or pluginName in pluginBlacklist: return self.sendErr()
      else: return self.sendPassthrough()
    
    if self.path.startswith('/services/browse'):
      if noBrowse: return self.sendForbid()
      return self.sendResponse(self.stripFolders(self.path))
    
    if noManage and self.path.startswith('/manage'):
      return self.sendForbid()
    
    if re.match(r'/library/metadata/.+', self.path):
      try: body, headers = getEtree(kBase + self.path, *self.getDataAndHeaders())
      except: return self.sendErr()
      contentRating = body.xpath('/MediaContainer/*/@contentRating')
      if contentRating and viewerAge and contentRatings.minAgeForContentRating(contentRating[0]) > viewerAge or not validateMetadataKey(self.path.split('/')[-1]):
        return self.sendErr()
      return self.sendResponse((etree.tostring(body), headers))
    
    self.sendPassthrough()

  def do_GET(self):
    self.handleRequest()
  
  def do_POST(self):
    self.handleRequest()

def updater():
  global die
  while not die:
    updateCache()
    lastUpdate = datetime.datetime.now()
    while not die and (datetime.datetime.now() - lastUpdate).total_seconds() < 600: pass

def main():
  global _metadataKeys, _libCacheTimes, die
  try:
    with open('cache') as f:
      savedInfo = pickle.load(f)
    _libCacheTimes = savedInfo['libCacheTimes']
    _metadataKeys = savedInfo['metadataKeys']
  except IOError:
    print 'Loading library info for the first time. This might take a while'
    _metadataKeys = dict()
    _libCacheTimes = dict()    
    updateCache(True)
  threading.Thread(target=updater).start()
  
  BaseHTTPRequestHandler.address_string = _bare_address_string # see comment above
  print 'starting server'
  server = HTTPServer(('127.0.0.1', 32404), PMSHandler)
  print 'server started'
  if plexOnlineOnly: getNonPlexOnlinePlugins()
  try: server.serve_forever()
  except KeyboardInterrupt:
    print 'Shutting down'
    server.socket.close()
    die = True

if __name__ == '__main__':
  main()

